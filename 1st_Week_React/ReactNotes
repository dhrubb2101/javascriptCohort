//React is a front-end JavaScript library for building user interfaces or UI components.
//It is maintained by Facebook and a community of individual developers and companies.

//difference between framework and library
//A framework is a collection of libraries that provides a structure for building applications, while a library is a collection of pre-written code that developers can use to optimize tasks.      
//React is a library, not a framework. It is used for building user interfaces, but it does not provide a complete solution for building applications. It is often used in conjunction with other libraries and frameworks to build full-fledged applications.
//React is often used with other libraries and frameworks to build full-fledged applications, such as Redux
//A library does not have anay rules, it is just a collection of code that you can use to optimize tasks.
//A framework has rules, it provides a structure for building applications, and it often comes with its own set of libraries and tools.
//A library is unopinated, you can use it in any way you want, while a framework is opinionated, it has its own way of doing things.

//react is more of a though process than a library
//Two options that one there is js block of code in server and sent it to browser and then browser will get only a div with root id in it and then browser will run the js code and then it will render the UI
//and then js will take care of the UI updates and add accordions, buttons etc
//and another option is that we execute the js code in the server and then we send the html,css,js to the browser basically what is mentioned below
//and the page that is rendered consisting of html, css and js will be shipped to the browser directly

//so now we have two options to execute the js code 
//one in client side 
//one in server side
//we have two teams here

//so now we will use react in client side
//because react was originally designed for client side rendering
//our base desire to understand the thought process behind react
//right now we will follow the option of shipping everything on browser and then rendering it.

//mujhe browser local storage se baatt krne ke liye api deta hai 
//like mei jb bhi kahi click krta hu toh voh click event ko notify krne ke liye api deta hai
//voh api kya hai?
//it is known as OnCLick event
//api basically ek interface hai bas baat krne ke liye voh server se aaye hamesha jaruri nivoh

//API can be anything function api, event api, browser api, etc

//Chapter one - Done 

//==================================================================

//command to run index.html
//npx serve

//===================================================================
//index.html
////onclick event would work on client side not on server side because there's no
//browser to capture the event

//Okay so chapter two is done
//we learn here what is actually react, we learnt how react works in classic way
//React just gives an element namely createElement
//it is basically a method through which we created elements
//we are basically loading js and handling it in app.js

// const container = document.getElementById('root')
// const root = ReactDOM.createRoot(container)
// root.render(React.createElement(App))

//description of the above code
//then we target the root in html
//and then reactDOM takes over and create a virtual DOM ( it is just DOm which is controlled by our code)
//and then we ask the root to render the everything in the virtual DOM

//so now whenever react gets a new element it will compare the new element with the old element and update the virtual DOM
//this is what as known react's diffing algorithm
//and then it will update the real DOM with the new element

//===================================================================

// props are properties which are object basically
//props are this {}
// in Chapter three we will learn about props
// in App2.js we will learn how to use props in react
//We basically built a component called Chai which takes props and returns a div with h1 and p elements
//it is a reusuable component now
//Chapter three is done
// we learnt about props in react_02
//in src/App2.js we learnt how to use props in react
//we created a component called Chai which takes props and returns a div with h1 and

//===================================================================
//we are using npx serve command to run the react app
//we are using ReactDOM to render the app

//====================================================================
//We used npm init -y command to create a package.json file in react_03
//In Chapter four we will learn about 
//Chapter four and five will be team focused
//how to work in a team
//for that we will use a tool called git
//for that we use prettier 


//command is npm install --save-dev prettier
//prettier is a code formatter
//it will format the code according to the rules we set in .prettierrc file

//then use command touch .prettierrc
//and then we will add the rules in .prettierrc file
//I have added the rules in .prettierrc file

//we will also add a .prettierignore file to ignore some files and folders
//we will ignore node_modules, dist, coverage folders
//we will also add a script in package.json to format the code
//we will use the command "prettier --write \"src/**/*.{js,jsx,json,ts,tsx,css,html}\"" to format the code

//chapter four is done  
//we learnt how to use prettier in react_03

//====================================================================

//Chapter five 

//we install eslint 
//command is npm install --save-dev eslint
//we will use eslint to lint the code

//then we run the command npx eslint --init
//and then we will answer the questions to set up eslint
//we will use the following options
//1. To check syntax
//2. JavaScript modules (import/export)
//3. React  
//4. JavaScript
//5. Browser
//6. Use a popular style guide

//we added this in react_03 only

//chapter five is done
//we learnt how to use eslint in react_03

//====================================================================

//Chapter six
//we used babel to 

// In your HTML:

// <script type="text/babel">
//   // React JSX code here
// </script>
// You're writing JSX inside a <script> tag. But browsers don’t understand JSX directly. That’s where Babel comes in.

//  Babel’s job:
// Transpile JSX into regular JavaScript (using React.createElement) that browsers can understand.

// Example:

// <h1>Chai</h1>

// Babel turns this into:

// React.createElement("h1", {}, "Chai")

// So, Babel is like a translator that converts JSX into JavaScript that browsers can understand.
//That's what we did in react_04 , chapter six is done

//====================================================================

//So in React Phase 1we learnt
// Client vs Server side
//React with CDN
//React and ReactDOM
//React 18 vs 19
//Render,Virtual DOM
//prettier
//Linting
//Biome
//Manual Props
//Babel
//Components

//====================================================================

//Chapter seven

