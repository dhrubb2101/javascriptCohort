//React is a front-end JavaScript library for building user interfaces or UI components.
//It is maintained by Facebook and a community of individual developers and companies.

//difference between framework and library
//A framework is a collection of libraries that provides a structure for building applications, while a library is a collection of pre-written code that developers can use to optimize tasks.      
//React is a library, not a framework. It is used for building user interfaces, but it does not provide a complete solution for building applications. It is often used in conjunction with other libraries and frameworks to build full-fledged applications.
//React is often used with other libraries and frameworks to build full-fledged applications, such as Redux
//A library does not have anay rules, it is just a collection of code that you can use to optimize tasks.
//A framework has rules, it provides a structure for building applications, and it often comes with its own set of libraries and tools.
//A library is unopinated, you can use it in any way you want, while a framework is opinionated, it has its own way of doing things.

//react is more of a though process than a library
//Two options that one there is js block of code in server and sent it to browser and then browser will get only a div with root id in it and then browser will run the js code and then it will render the UI
//and then js will take care of the UI updates and add accordions, buttons etc
//and another option is that we execute the js code in the server and then we send the html,css,js to the browser basically what is mentioned below
//and the page that is rendered consisting of html, css and js will be shipped to the browser directly

//so now we have two options to execute the js code 
//one in client side 
//one in server side
//we have two teams here

//so now we will use react in client side
//because react was originally designed for client side rendering
//our base desire to understand the thought process behind react
//right now we will follow the option of shipping everything on browser and then rendering it.

//mujhe browser local storage se baatt krne ke liye api deta hai 
//like mei jb bhi kahi click krta hu toh voh click event ko notify krne ke liye api deta hai
//voh api kya hai?
//it is known as OnCLick event
//api basically ek interface hai bas baat krne ke liye voh server se aaye hamesha jaruri nivoh

//API can be anything function api, event api, browser api, etc

//Chapter one - Done 

//==================================================================

//command to run index.html
//npx serve

//===================================================================
//index.html
////onclick event would work on client side not on server side because there's no
//browser to capture the event

//Okay so chapter two is done
//we learn here what is actually react, we learnt how react works in classic way
//React just gives an element namely createElement
//it is basically a method through which we created elements
//we are basically loading js and handling it in app.js

// const container = document.getElementById('root')
// const root = ReactDOM.createRoot(container)
// root.render(React.createElement(App))

//description of the above code
//then we target the root in html
//and then reactDOM takes over and create a virtual DOM ( it is just DOm which is controlled by our code)
//and then we ask the root to render the everything in the virtual DOM

//so now whenever react gets a new element it will compare the new element with the old element and update the virtual DOM
//this is what as known react's diffing algorithm
//and then it will update the real DOM with the new element

//===================================================================

// props are properties which are object basically
//props are this {}
// in Chapter three we will learn about props
// in App2.js we will learn how to use props in react
//We basically built a component called Chai which takes props and returns a div with h1 and p elements
//it is a reusuable component now
//Chapter three is done
// we learnt about props in react_02
//in src/App2.js we learnt how to use props in react
//we created a component called Chai which takes props and returns a div with h1 and

//===================================================================
//we are using npx serve command to run the react app
//we are using ReactDOM to render the app

//====================================================================
//We used npm init -y command to create a package.json file in react_03
//In Chapter four we will learn about 
//Chapter four and five will be team focused
//how to work in a team
//for that we will use a tool called git
//for that we use prettier 


//command is npm install --save-dev prettier
//prettier is a code formatter
//it will format the code according to the rules we set in .prettierrc file

//then use command touch .prettierrc
//and then we will add the rules in .prettierrc file
//I have added the rules in .prettierrc file

//we will also add a .prettierignore file to ignore some files and folders
//we will ignore node_modules, dist, coverage folders
//we will also add a script in package.json to format the code
//we will use the command "prettier --write \"src/**/*.{js,jsx,json,ts,tsx,css,html}\"" to format the code

//chapter four is done  
//we learnt how to use prettier in react_03

//====================================================================

//Chapter five 

//we install eslint 
//command is npm install --save-dev eslint
//we will use eslint to lint the code

//then we run the command npx eslint --init
//and then we will answer the questions to set up eslint
//we will use the following options
//1. To check syntax
//2. JavaScript modules (import/export)
//3. React  
//4. JavaScript
//5. Browser
//6. Use a popular style guide

//we added this in react_03 only

//chapter five is done
//we learnt how to use eslint in react_03

//====================================================================

//Chapter six
//we used babel to 

// In your HTML:

// <script type="text/babel">
//   // React JSX code here
// </script>
// You're writing JSX inside a <script> tag. But browsers don’t understand JSX directly. That’s where Babel comes in.

//  Babel’s job:
// Transpile JSX into regular JavaScript (using React.createElement) that browsers can understand.

// Example:

// <h1>Chai</h1>

// Babel turns this into:

// React.createElement("h1", {}, "Chai")

// So, Babel is like a translator that converts JSX into JavaScript that browsers can understand.
//That's what we did in react_04 , chapter six is done

//====================================================================

//So in React Phase 1we learnt
// Client vs Server side
//React with CDN
//React and ReactDOM
//React 18 vs 19
//Render,Virtual DOM
//prettier
//Linting
//Biome
//Manual Props
//Babel
//Components

//====================================================================

//Chapter seven
//now in react_05 
//I want to give control to react of index.html to index.js
//here the work used to do via CDN we are doing it now via npm 
//now what we did in index.js wouldn't work in index.html
//because we are using ReactDOM.createRoot which is not available in the browser
//because we are using ReactDOM from npm, 
//so we need to use a bundler to bundle the code and make it work in the browser

//Your setup won’t work directly in the browser because:
//Problem:
//You're importing modules (import React from "react" etc.) in index.js, but the browser doesn't understand ES Modules or JSX out of the box.

//Solution:
// Option 2: Use ES Modules + Bundler (Recommended)
//If you're using import/export, you must use a bundler like:
// Vite (recommended for modern apps)
// create-react-app
// Webpack (more complex)
// These tools:
// Transpile JSX to JS
// Bundle your code
// Serve it in a format the browser understands

//what we want to do here is use a modern build tool
//so that we can use jsx and ES module and also our able to use modern JavaScript syntax
//one is esbuild an extremely fast bundler
//in development we use esbuild and in production we use rollup

//we also need hot module replacement (HMR) for development
//HMR allows us to see changes in the browser without refreshing the page

//Alternatively for vite we can use webpack or parcel or snowpack or rspack

//command to install vite
//npm install --save-dev vite @vitejs/plugin-react

//after installing vite we need to create a vite.config.js file
//this file will contain the configuration for vite
//we copy the code from previous vite projects , I have mentioned the code here in the vite.config.js file
//after you install vite , you need to fulfil some expectations
//you need to create a src folder and inside that folder add
//app.js and index.js file

//now you can rename the app.js file to App.jsx and index.js file to index.jsx
//in javascript we are using .jsx and this is vite configuration 
//if vite allowed all of it to be run in js then it would be in js extension
//why .jsx? because we are using jsx syntax in the file
///what's it relation with vite?
//vite is a build tool that allows us to use modern JavaScript syntax and JSX syntax

//Now to run the project we go to package.json file and add a script
// "scripts": {
//     "dev": "vite"
//   },

//then go for command npm run dev
//this will start the vite server and open the app in the browser
//also import react in App.jsx file
//and import ReactDOM from "react-dom/client" in App.jsx file

//chapter seven is done

//=====================================================================

//Chapter eight starts
//we know DOM now but we don't know how to update DOM in react
//how to update DOM in react
//react is a engine and it tells how to update everything in DOM 
//it tells a way and here we are going to learn that but before that we will learn 

//how to take a web request 
//web request means API calls 
//there are two types of API calls
//one is development API calls
//one is production API calls
//one the server can be with me 
//or server can be with aws or digital ocean or any other cloud provider

//CORS gets fixed in backend
//CORS is a security feature implemented by web browsers to prevent malicious websites from making requests to a different domain than the one that served the original web page.
//It restricts web pages from making requests to a different domain than the one that served the
//browser implements CORS to protect users from cross-site request forgery (CSRF) attacks and other security vulnerabilities.

//WE GET cors ERRORS when we do development

//to avoid CORS we use Proxy works only in local development
//we send all requests at /api
//by proxy you can define the target of any request which goes to /api
//ex target : "http://localhost:8000"
//changeOrigin: true
//how you use proxy is different in create-react-app and vite and etc
//api goes like this 
//http://localhost:8000/api/hello
//but hoga kya ki jb mei yeh request bhejunga on http://localhost:5173/api/hello usse proxy rokega and kahega aapka origin yeh nahi hai yeh hai jo target set kia hoga http://localhost:8000 hogi toh cors errors nahi aayegi
//toh usse kya hoga server ko lagega usne he request bheji hai

//for proxy in vite we will add the following code in vite.config.js file
// server: {
//         proxy: {
//             '/api': {
//                 target: 'https://localhost:3000', // Adjust the target URL as needed
//                 changeOrigin: true,
//             },
//         },
//     },

//now we have a webpage and a server and 
//we want to send a request from the webpage to the server and get a response
//and whatever value we get from the server we want to update the data on the webpage
//if the data was empty before and after the request
//there's a patttern to do this
//it doesn't happen like that you mkae a web request, declare a variable and ehrnever the value came in the variable and automatically react changes it it
//it doesn't happen like that

//till right now in fetch request what we were doing was 
//we define a variable named message and message = hitesh initially
//then we originate a fetch request
//and once fetch request is done we update the message variable
//say message = newData 
//this is how javascript works

//but in react we don't do that
//to do that we read hooks for that

//to make your life easier in react 
//consider hooks -> functions
//consider hooks as functions
//if a hook is a function then it can return object, string, array,boolean 
//in array we can return like below examples
//[1,"1"],[variable,function()]


//now what we will do is import two functions 
//useState and useEffect from react
//to use it we do it like this giving it some default value
//ex useState("Loading")
//and default can be anything another funtion even.
//and this function is predefined in react
//since this function executed it is destructured and return an array
//the first element is the current state value
//the second element is a function that updates the state value
//we basically desstructure the function like this
//const [message, setMessage] = useState("Loading")

//basically here what we get is a variable and a method to change the variable